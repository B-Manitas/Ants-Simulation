CXX=clang++-7
CXXFLAGS= -Wall -std=c++11 -g -O3
EXEC_FILES= test coord ensCoord
SRC= $(wildcard *.cpp)
OBJ=$(SRC:.cpp=.o)

all: $(EXEC_FILES)

%.o: %.cpp
	$(CXX) -o $@ -c $< $(CFLAGS

test: $(OBJ)
	$(CXX) -o $@ $^ $(LDFLAGS)

$(OBJ): test.cpp

check: test
	./test -e

clean:
	rm -f $(OBJ) $(EXEC_FILES)



============
test: test.o coord.o
	$(CXX) -o $@ $^ $(LDFLAGS)

============
TEST_CASE("Test du constructeur de la class Grille.")
{

  CHECK(Grille(1).grille == std::vector<std::vector<Place>>({{Place(Coord(0, 0))}}));
  CHECK(Grille(2).grille == std::vector<std::vector<Place>>({{Place(Coord(0, 0)), Place(Coord(1, 0))},
                                                             {Place(Coord(1, 0)), Place(Coord(1, 1))}}));

  // CHECK(Grille(2).grille == EnsCoord({Coord(0, 0), Coord(1, 0), Coord(1, 0), Coord(1, 1)}));
}

=========


{
  Coord coordF = fourmi.getCoord();

  Place pf = laGrille.chargePlace(coordF);
  EnsCoord voisCoord = voisines(coordF);

  for (int numRegle = 0; numRegle < 5; numRegle++)
    for (int i = 0; i < voisCoord.taille(); i++)
    {
      Place vois = laGrille.chargePlace(voisCoord.ieme(i));
      if (Action().condtion_n(numRegle, fourmi, pf, vois))
      {
        Action().action_n(numRegle, fourmi, pf, vois);
        laGrille.rangePlace(pf);
        laGrille.rangePlace(vois);
        return;
      }
    }
}